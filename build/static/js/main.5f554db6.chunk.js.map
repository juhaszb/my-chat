{"version":3,"sources":["chat.d.ts","TextInput.tsx","Login.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","listener","obj","packet","this","send","stringify","listeners","splice","findIndex","args","filter","call","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","register","textInput","React","createRef","src","width","onClick","ref","href","preventDefault","current","sendPacket","staySignedIn","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5f554db6.chunk.js","sourcesContent":["import { ProxyEventMap } from \"./Proxy\"\r\n\r\n\r\nexport interface MessageDto {\r\n    id: number;\r\n    timeStamp: string;\r\n    referenceTo: number; // 0: normal message, +: update, -: delete\r\n    senderId: string;\r\n    contentType: number;\r\n    content: string;\r\n}\r\n\r\nexport interface UserDto {\r\n    id: string;\r\n    displayName: string;\r\n    tag: string;\r\n    lastSeen: string;\r\n}\r\n\r\nexport interface ConversationDto {\r\n    channelId: string;\r\n    parentChannelId: string;\r\n    name: string;\r\n    description: string;\r\n    data: string;\r\n    state: number; // disconnected, outgoingRequest, incomingRequest, accepted, group\r\n    access: number; // none, read, write, admin\r\n    notificationLevel: number; // none, gray, push\r\n    unreadCount: number;\r\n    memberIds: string[];\r\n    lastMessages: MessageDto[];\r\n}\r\n\r\nexport interface InboxDto {\r\n    user: UserDto;\r\n    contacts: UserDto[];\r\n    conversations: ConversationDto[];\r\n}\r\n\r\nexport type OutgoingPacket =\r\n    { type: \"login\", email: string, password: string, staySignedIn: boolean } |\r\n    { type: \"loginWithToken\", token: string } |\r\n    { type: \"register\", email: string, password: string, displayName: string, staySignedIn: boolean } |\r\n    { type: \"contactRequest\", email: string, firstMessage: string } |\r\n    { type: \"message\", channelId: string, referenceTo: number, contentType: number, content: string };\r\n\r\nexport type IncomingPacket =\r\n    { type: \"error\", message: string } |\r\n    { type: \"login\", query: string, token: string, inbox: InboxDto } |\r\n    { type: \"message\", channelId: string, message: MessageDto } |\r\n    { type: \"conversationAdded\", conversation: ConversationDto } |\r\n    { type: \"conversationRemoved\", channelId: string } |\r\n    { type: \"user\", user: UserDto };\r\n\r\n\r\nexport class EventProducer {\r\n    private listeners: { type: string, listener, obj?: Object }[] = [];\r\n\r\n\r\n    addEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object) {\r\n        this.listeners.push({ type, listener, obj });\r\n    }\r\n\r\n\r\n    removeEventListener(type: string, listener) {\r\n        this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener), 1);\r\n    }\r\n\r\n    protected dispatch(type: string, ...args) {\r\n        for (let listener of this.listeners.filter(x => x.type === type))\r\n            listener.listener.call(listener.obj, ...args);\r\n    }\r\n\r\n    removeAllEventListener(obj: Object) {\r\n        if (!obj)\r\n            throw new Error(\"Must specify object\");\r\n        this.listeners = this.listeners.filter(x => x.obj !== obj);\r\n    }\r\n\r\n}\r\n\r\n\r\n interface ProxyEventMap\r\n{\r\nlogin?: () => void;\r\nmessage?: ( channelId: string, message: MessageDto ) => void;\r\nconversation?: ( channelId: string ) => void;\r\n}\r\n\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap>\r\n{\r\n\r\n    private ws: WebSocket;\r\n    constructor() {\r\n        super();\r\n        this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat\");\r\n        this.ws.addEventListener(\"open\", () => {\r\n\r\n\r\n        });\r\n        this.ws.addEventListener(\"message\", e => {\r\n            let p =JSON.parse(e.data) as IncomingPacket;\r\n            switch (p.type) {\r\n                case \"error\":\r\n                    alert(p.message);\r\n                    break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    this.dispatch(\"login\");\r\n                    break;\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\r\n                    this.dispatch(\"message\", cid, p.message);\r\n                    break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push(p.conversation);\r\n                    this.dispatch(\"conversation\", p.conversation.channelId);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    addEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object) {\r\n\r\n        super.addEventListener(type,listener,obj);\r\n    }\r\n    removeAllEventListener(obj: Object) {\r\n        super.removeAllEventListener(obj);\r\n    }\r\n\r\n    public sendPacket(packet: OutgoingPacket) {\r\n        this.ws.send(JSON.stringify(packet));\r\n    }\r\n    inbox: InboxDto | null = null;\r\n\r\n\r\n}\r\nexport var proxy = new Proxy();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport './TextInput.css'\r\n\r\n\r\nexport interface TextInputOptions\r\n{\r\nvalue?: string;\r\nonChange?: ( value: string ) => void;\r\ntype?: \"text\" | \"password\" | \"email\";\r\nplaceholder?: string;\r\nonEnter?: () => void;\r\nautofocus?: boolean;\r\n};\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions\r\n{\r\nbuttonContent?: string;\r\nonClick?: ( text: string ) => boolean | void;\r\n}\r\n\r\nexport class TextInput extends Component<TextInputOptions>\r\n{\r\n    state = { value: this.props.value, focus: false };\r\n    render()\r\n    {\r\n        let attrs = {} as any;\r\n        if ( this.props.autofocus )\r\n            attrs.autoFocus = true;\r\n        if ( this.props.onEnter )\r\n            attrs.onKeyDown = e =>\r\n        {\r\n            if ( e.keyCode === 13 )\r\n                this.props.onEnter!();\r\n        };\r\n        return (\r\n            <div className=\"text-input\">\r\n            <input type={ this.props.type ?? \"text\" } value={ this.state.value }\r\n            onChange={ e =>\r\n            {\r\n            this.setState( { value: e.target.value } );\r\n            this.props.onChange?.( e.target.value );\r\n            } }\r\n            onBlur={ () => this.setState( { focus: false } ) }\r\n            onFocus={ () => this.setState( { focus: true } ) } {...attrs} />\r\n            <div className=\"focus-indicator\"></div>\r\n            <label className={ this.state.value || this.state.focus ? \"subsided\" : \"\" }>\r\n            { this.props.placeholder }\r\n            </label>\r\n            \r\n            </div> );\r\n    }\r\n\r\n    \r\n}\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n    onClick()\r\n    {\r\n        if ( this.props.onClick?.( this.textInput.current?.state.value ?? \"\" ) )\r\nthis.textInput.current?.setState( { value: \"\" } );\r\n    }\r\n    \r\n    render()\r\n    {\r\n    return (\r\n    <div className=\"text-input-and-button\">\r\n    <TextInput { ...this.props } ref={this.textInput} onEnter={ () => this.onClick() } />\r\n    <button type=\"button\" onClick={ () => this.onClick() }>\r\n    { this.props.buttonContent }\r\n    </button>\r\n    </div>\r\n    );\r\n    }\r\n    textInput = React.createRef<TextInput>();\r\n}\r\n    \r\n    \r\n\r\n\r\n\r\n","import React, { Component, ChangeEvent } from 'react';\r\nimport { proxy } from './chat.d';\r\nimport { TextInput } from './TextInput';\r\n\r\n\r\n/*\r\n\r\n<button type=\"button\" onClick={ () => this.onClick() }>\r\n{ this.state.register ? \"Register\" : \"Login\" }\r\n</button>\r\n*/\r\n//this.setState({ email: e.target.value})\r\nexport class Login extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" />\r\n\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={this.state.email} onChange={e => this.email(e)} autofocus={true} onEnter={() => this.onClick()} />\r\n                <TextInput type=\"password\" placeholder=\"Password\" value={this.state.password} onChange={e => this.setState({ password: e })} onEnter={() => this.onClick()} />\r\n\r\n                {this.state.register &&\r\n                    <TextInput type=\"text\" ref={this.textInput} placeholder=\"Display Name (Agent Smith)\" value={this.state.displayName}\r\n                        onChange={e => this.setState({ displayName: e })} onEnter={() => this.onClick()} />}\r\n\r\n\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.state.register ? \"Register\" : \"Login\"}\r\n                </button>\r\n\r\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\r\n                    <a href=\"\" onClick={e => { e.preventDefault(); this.setState({ register: !this.state.register }); }}>\r\n                        {this.state.register ? \"Login\" : \"Register\"}\r\n                    </a>\r\n                </p>\r\n\r\n                <button type=\"button\" onClick={() => this.onClick()}>Login</button>\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n\r\n            </div>);\r\n    }\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n\r\n    textInput = React.createRef<TextInput>();\r\n\r\n\r\n    email(e: string) {\r\n        if (this.state.register)\r\n            if (e === \"BI3ULX\") {\r\n                this.textInput.current?.setState({ value: \"Balázs\" });\r\n                this.setState({ ...this.state, displayName: \"Balázs\" });\r\n            }\r\n        this.setState({ email: e });\r\n    }\r\n\r\n    onClick() {\r\n\r\n        if (this.state.register)\r\n            proxy.sendPacket({\r\n                type: \"register\", email: this.state.email, password: this.state.password,\r\n                displayName: this.state.displayName, staySignedIn: false\r\n            });\r\n        else\r\n            proxy.sendPacket({\r\n                type: \"login\", email: this.state.email, password: this.state.password,\r\n                staySignedIn: false\r\n            });\r\n    }\r\n\r\n\r\n}","import React, {Component} from 'react';\nimport { Login} from './Login'\n\nexport default class App extends Component\n{\n  render()\n  {\n  return (\n  <div className=\"app\">\n  <Login />\n  </div>\n  );\n  }\n  }\n\n\n\n/*import logo from './logo.svg';\nimport './App.css';\nimport './chat.d.ts'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}
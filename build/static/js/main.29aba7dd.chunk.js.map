{"version":3,"sources":["chat.d.ts","TextInput.tsx","Login.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","e","console","log","p","JSON","parse","data","type","alert","message","islogged","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","listener","obj","packet","this","send","stringify","listeners","splice","findIndex","args","filter","call","Error","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","TextInputAndButton","textInput","React","createRef","onClick","current","ref","buttonContent","Login","email","password","displayName","register","src","width","href","preventDefault","sendPacket","staySignedIn","ConversationCard","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleTimeString","content","m","forceUpdate","removeAllEventListener","LeftPane","user","tag","text","sendContactRequest","map","key","selectedConversation","firstMessage","c","MessageCard","own","toDateString","PureComponent","RightPane","referenceTo","contentType","id","senderId","onSend","onBack","Main","undefined","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.29aba7dd.chunk.js","sourcesContent":["import { ProxyEventMap } from \"./Proxy\"\r\nimport App from \"./App\";\r\n\r\n\r\nexport interface MessageDto {\r\n    id: number;\r\n    timeStamp: string;\r\n    referenceTo: number; // 0: normal message, +: update, -: delete\r\n    senderId: string;\r\n    contentType: number;\r\n    content: string;\r\n}\r\n\r\nexport interface UserDto {\r\n    id: string;\r\n    displayName: string;\r\n    tag: string;\r\n    lastSeen: string;\r\n}\r\n\r\nexport interface ConversationDto {\r\n    channelId: string;\r\n    parentChannelId: string;\r\n    name: string;\r\n    description: string;\r\n    data: string;\r\n    state: number; // disconnected, outgoingRequest, incomingRequest, accepted, group\r\n    access: number; // none, read, write, admin\r\n    notificationLevel: number; // none, gray, push\r\n    unreadCount: number;\r\n    memberIds: string[];\r\n    lastMessages: MessageDto[];\r\n}\r\n\r\nexport interface InboxDto {\r\n    user: UserDto;\r\n    contacts: UserDto[];\r\n    conversations: ConversationDto[];\r\n}\r\n\r\nexport type OutgoingPacket =\r\n    { type: \"login\", email: string, password: string, staySignedIn: boolean } |\r\n    { type: \"loginWithToken\", token: string } |\r\n    { type: \"register\", email: string, password: string, displayName: string, staySignedIn: boolean } |\r\n    { type: \"contactRequest\", email: string, firstMessage: string } |\r\n    { type: \"message\", channelId: string, referenceTo: number, contentType: number, content: string };\r\n\r\nexport type IncomingPacket =\r\n    { type: \"error\", message: string } |\r\n    { type: \"login\", query: string, token: string, inbox: InboxDto } |\r\n    { type: \"message\", channelId: string, message: MessageDto } |\r\n    { type: \"conversationAdded\", conversation: ConversationDto } |\r\n    { type: \"conversationRemoved\", channelId: string } |\r\n    { type: \"user\", user: UserDto };\r\n\r\n\r\nexport class EventProducer {\r\n    private listeners: { type: string, listener, obj?: Object }[] = [];\r\n\r\n\r\n    addEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object) {\r\n        this.listeners.push({ type, listener, obj });\r\n    }\r\n\r\n\r\n    removeEventListener<K extends keyof M>(type: K, listener: M[K]) {\r\n        this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener), 1);\r\n    }\r\n\r\n    protected dispatch<K extends keyof M>(type: K, ...args) {\r\n        for (let listener of this.listeners.filter(x => x.type === type))\r\n            listener.listener.call(listener.obj, ...args);\r\n    }\r\n\r\n    removeAllEventListener(obj: Object) {\r\n        if (!obj)\r\n            throw new Error(\"Must specify object\");\r\n        this.listeners = this.listeners.filter(x => x.obj !== obj);\r\n    }\r\n\r\n}\r\n\r\n\r\n interface ProxyEventMap\r\n{\r\nlogin?: () => void;\r\nmessage?: ( channelId: string, message: MessageDto ) => void;\r\nconversation?: ( channelId: string ) => void;\r\n}\r\n\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap>\r\n{\r\n\r\n    private ws: WebSocket;\r\n    constructor() {\r\n        super();\r\n        this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat\");\r\n        this.ws.addEventListener(\"open\", e  => {\r\n            console.log(e);\r\n\r\n        });\r\n        this.ws.addEventListener(\"message\", e => {\r\n            let p =JSON.parse(e.data) as IncomingPacket;\r\n            switch (p.type) {\r\n                case \"error\":\r\n                    alert(p.message);\r\n                    break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    islogged=true;\r\n                   // this.addEventListener(\"login\",p,null);\r\n                   islogged=true;\r\n                   \r\n                    this.dispatch(\"login\");\r\n                    break;\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\r\n                    this.dispatch(\"message\", cid, p.message);\r\n                    break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push(p.conversation);\r\n                    this.dispatch(\"conversation\", p.conversation.channelId);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    addEventListener<K extends keyof M>(type: K, listener: M[K], obj?: Object) {\r\n\r\n        super.addEventListener(type,listener,obj);\r\n    }\r\n    removeAllEventListener(obj: Object) {\r\n        super.removeAllEventListener(obj);\r\n    }\r\n\r\n    public sendPacket(packet: OutgoingPacket) {\r\n        this.ws.send(JSON.stringify(packet));\r\n    }\r\n    inbox: InboxDto | null = null;\r\n\r\n\r\n}\r\nexport var proxy = new Proxy();\r\n\r\nexport var islogged = false;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport './TextInput.css'\r\n\r\n\r\nexport interface TextInputOptions {\r\n    value?: string;\r\n    onChange?: (value: string) => void;\r\n    type?: \"text\" | \"password\" | \"email\";\r\n    placeholder?: string;\r\n    onEnter?: () => void;\r\n    autofocus?: boolean;\r\n};\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions {\r\n    buttonContent?: string;\r\n    onClick?: (text: string) => boolean | void;\r\n}\r\n\r\nexport class TextInput extends Component<TextInputOptions>\r\n{\r\n    state = { value: this.props.value, focus: false };\r\n    render() {\r\n        let attrs = {} as any;\r\n        if (this.props.autofocus)\r\n            attrs.autoFocus = true;\r\n        if (this.props.onEnter)\r\n            attrs.onKeyDown = e => {\r\n                if (e.keyCode === 13)\r\n                    this.props.onEnter!();\r\n            };\r\n        return (\r\n            <div className=\"text-input\">\r\n                <input type={this.props.type ?? \"text\"} value={this.state.value}\r\n                    onChange={e => {\r\n                        this.setState({ value: e.target.value });\r\n                        this.props.onChange?.(e.target.value);\r\n                    }}\r\n                    onBlur={() => this.setState({ focus: false })}\r\n                    onFocus={() => this.setState({ focus: true })} {...attrs} />\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\r\n                    {this.props.placeholder}\r\n                </label>\r\n\r\n            </div>);\r\n    }\r\n\r\n\r\n}\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\r\n{\r\n    onClick() {\r\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\"))\r\n            this.textInput.current?.setState({ value: \"\" });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput {...this.props} ref={this.textInput} onEnter={() => this.onClick()} />\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.props.buttonContent}\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n    textInput = React.createRef<TextInput>();\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component, ChangeEvent } from 'react';\r\nimport { proxy } from './chat.d';\r\nimport { TextInput } from './TextInput';\r\n\r\n\r\n/*\r\n\r\n<button type=\"button\" onClick={ () => this.onClick() }>\r\n{ this.state.register ? \"Register\" : \"Login\" }\r\n</button>\r\n*/\r\n//this.setState({ email: e.target.value})\r\nexport class Login extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" />\r\n\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={this.state.email} onChange={e => this.email(e)} autofocus={true} onEnter={() => this.onClick()} />\r\n                <TextInput type=\"password\" placeholder=\"Password\" value={this.state.password} onChange={e => this.setState({ password: e })} onEnter={() => this.onClick()} />\r\n\r\n                {this.state.register &&\r\n                    <TextInput type=\"text\" ref={this.textInput} placeholder=\"Display Name (Agent Smith)\" value={this.state.displayName}\r\n                        onChange={e => this.setState({ displayName: e })} onEnter={() => this.onClick()} />}\r\n\r\n\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.state.register ? \"Register\" : \"Login\"}\r\n                </button>\r\n\r\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\r\n                    <a href=\"\" onClick={e => { e.preventDefault(); this.setState({ register: !this.state.register }); }}>\r\n                        {this.state.register ? \"Login\" : \"Register\"}\r\n                    </a>\r\n                </p>\r\n\r\n                <button type=\"button\" onClick={() => this.onClick()}>Login</button>\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n\r\n            </div>);\r\n    }\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n\r\n    textInput = React.createRef<TextInput>();\r\n\r\n\r\n    email(e: string) {\r\n        if (this.state.register)\r\n            if (e === \"BI3ULX\") {\r\n                this.textInput.current?.setState({ value: \"Balázs\" });\r\n                this.setState({ ...this.state, displayName: \"Balázs\" });\r\n            }\r\n        this.setState({ email: e });\r\n    }\r\n\r\n    onClick() {\r\n\r\n        if (this.state.register)\r\n            proxy.sendPacket({\r\n                type: \"register\", email: this.state.email, password: this.state.password,\r\n                displayName: this.state.displayName, staySignedIn: false\r\n            });\r\n        else\r\n            proxy.sendPacket({\r\n                type: \"login\", email: this.state.email, password: this.state.password,\r\n                staySignedIn: false\r\n            });\r\n    }\r\n\r\n\r\n}","import React, { Component, ChangeEvent } from 'react';\r\nimport { ConversationDto, proxy } from './chat.d';\r\n\r\n\r\nexport class ConversationCard extends Component<{\r\n    conversation: ConversationDto,\r\n    selected: boolean,\r\n    onSelect: () => void\r\n}>\r\n{\r\n    render() {\r\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\r\n            this.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\r\n        return (\r\n            <div className={\"conversation-card\" + (this.props.selected ? \" selected\" : \"\")}\r\n                onClick={() => this.props.onSelect()}>\r\n                <div className=\"row\">\r\n                    <span className=\"channel-name\">{this.props.conversation.name}</span>\r\n                    <span className=\"time\">\r\n                        {lastMessage && new Date(lastMessage.timeStamp).toLocaleTimeString()}\r\n                    </span>\r\n                </div>\r\n                <span className=\"last-message\">{lastMessage?.content}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n\r\n\r\n}","import React, { Component, ChangeEvent } from 'react';\r\nimport { InboxDto, ConversationDto, proxy } from './chat.d';\r\nimport { TextInputAndButton } from './TextInput';\r\nimport { ConversationCard } from './ConversationCard';\r\n\r\nexport class LeftPane extends Component<{\r\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined,\r\n    onSelect: (c: ConversationDto) => void\r\n}>\r\n{\r\n    render() {\r\n        return (\r\n            <div className=\"left-pane\">\r\n                <p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p>\r\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\r\n                    buttonContent=\"Inv\"\r\n                    onClick={text => this.sendContactRequest(text)} />\r\n                <div className=\"conversations\">\r\n                    {this.props.inbox.conversations.map(x =>\r\n                        <ConversationCard\r\n                            key={x.channelId}\r\n                            conversation={x}\r\n                            selected={x === this.props.selectedConversation}\r\n                            onSelect={() => this.props.onSelect(x)} />)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    sendContactRequest(email: string) {\r\n        proxy.sendPacket({ type: \"contactRequest\", email, firstMessage: \"Hello\" });\r\n        return true;\r\n    }\r\n\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"conversation\", c => this.forceUpdate(), this);\r\n    }\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n}","import React, { PureComponent } from 'react';\r\nimport { MessageDto } from './chat';\r\n\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\r\n{\r\n    render() {\r\n        return (\r\n            <div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\r\n                <div className=\"bubble\">\r\n                    <span className=\"text\">{this.props.message.content}</span>\r\n                    <span className=\"time\">\r\n                        {new Date(this.props.message.timeStamp).toDateString()}\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { ConversationDto, proxy } from './chat.d';\r\nimport { MessageCard } from './MessageCard';\r\nimport { TextInputAndButton } from './TextInput';\r\n\r\n\r\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\r\n{\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"message\", (cid, m) => {\r\n            if (cid === this.props.conversation?.channelId)\r\n                this.forceUpdate();\r\n        }, this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n    onSend(text: string) {\r\n        proxy.sendPacket({ type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0, contentType: 0, content: \"B: \" + text });\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"right-pane column\">\r\n                {this.props.conversation &&\r\n                    <>\r\n                        <div className=\"conversation-header\">\r\n                            <p>{this.props.conversation?.name}</p>\r\n                        </div>\r\n                        <div className=\"messages\">\r\n                            {this.props.conversation?.lastMessages.map(x =>\r\n                                <MessageCard key={x.id} message={x}\r\n                                    own={x.senderId === proxy.inbox?.user.id} />)}\r\n                        </div>\r\n                        <div className=\"send-message row\">\r\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\r\n                                buttonContent=\"Send\" onClick={x => this.onSend(x)} />\r\n                        </div>\r\n                        <div className=\"conversation-header row\">\r\n                            <button type=\"button\" className=\"only-narrow\"\r\n                                onClick={() => this.props.onBack()}>Back</button>\r\n                            <p>{this.props.conversation?.name}</p>\r\n                        </div>\r\n                    </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}","import React, { Component } from 'react';\r\nimport { ConversationDto, proxy } from './chat.d';\r\nimport { LeftPane } from './LeftPane';\r\nimport { RightPane } from './RightPane';\r\n\r\n\r\nexport class Main extends Component {\r\n    state = { selectedConversation: undefined as (ConversationDto | undefined) };\r\n\r\n\r\n\r\n    render() {\r\n        let className = \"main row \" + (this.state.selectedConversation ? \"right\" : \"left\");\r\n        return (\r\n            <div className={className}>\r\n                <LeftPane\r\n                    inbox={proxy.inbox!}\r\n                    selectedConversation={this.state.selectedConversation}\r\n                    onSelect={c => this.setState({ selectedConversation: c })} />\r\n                <RightPane conversation={this.state.selectedConversation}\r\n                    onBack={() => this.setState({ selectedConversation: undefined })} />\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport { Login } from './Login'\nimport { Main } from './Main'\nimport { islogged, proxy } from './chat.d';\n\n\n\n\n/* interface State{isLoggedIn:boolean};\n export var state:State;\n*/\n\nexport default class App extends Component {\n\n \n  render() {  \n    proxy.addEventListener(\"login\",() => this.forceUpdate(),this);\n    return (\n      <div className=\"app\">\n       {!islogged && <Login />}\n       {islogged&& <Main />}\n      </div>\n    );\n  }\n}\n\n\n\n/*import logo from './logo.svg';\nimport './App.css';\nimport './chat.d.ts'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}